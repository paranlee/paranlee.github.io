<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Why project needed Boxcox transformation? on Paran Lee&#39;s docs</title>
    <link>https://paranlee.github.io/data-pipeline/boxcox/</link>
    <description>Recent content in Why project needed Boxcox transformation? on Paran Lee&#39;s docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 01 Mar 2021 00:36:39 +0900</lastBuildDate>
    
        <atom:link href="https://paranlee.github.io/data-pipeline/boxcox/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>Why project needed Boxcox transformation?</title>
        <link>https://paranlee.github.io/data-pipeline/boxcox/00-boxcox/</link>
        <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/data-pipeline/boxcox/00-boxcox/</guid>
        <description>Why use Boxcox transformation, perspective of workflow 값들의 차분 배열 (sort 후 뒤에 친구 값이랑 나랑 차이만 쏙)
→ boxcox transformation (복잡한 지수함수의 승수의 해를 뉴턴 메서드로 구하고 이를 정규분포로 변환)
→ 정규분포 6 σ (적당한 값 추리기 좋다)
→ 평범한 놈들 그래 니들을 원했어 ㅇㅇ
Definiotion of the Boxcox transformation 선두 그룹에 값이 몰려 있는 경우처럼 통계적으로 접근하는 값들이 불균일한 산포를 이룰 경우,
이 값들을 정규분포 관점으로 접근하고자 할 때 Boxcox transformation 을 사용합니다.</description>
      </item>
      
      <item>
        <title>Boxcox transformation on workflow</title>
        <link>https://paranlee.github.io/data-pipeline/boxcox/01-workflow/</link>
        <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/data-pipeline/boxcox/01-workflow/</guid>
        <description>Concept 몇가지 개념정리 및 코드를 보고 진행합니다.
Outlier removal workflow 차분(Difference):
sort 후 각 항목의 차이 값차분 값의 배열을 만들 수 있음. 사분위수(Quartile):
데이터를 가장 작은 수부터 가장 큰 수까지 크기가 커지는 순서대로 정렬하였을 때,1/4, 2/4, 3/4 위치에 있는 수를 말한다. 각각 1사분위수, 2사분위수, 3사분위수라고 한다. 1/4의 위치란 전체 데이터의 수가 만약 100개이면 25번째 순서, 즉 하위 25%를 말한다. 따라서 2사분위수는 중앙값과 같다.때로는 위치를 1/100 단위로 나눈 백분위수(percentile)을 사용하기도 한다.</description>
      </item>
      
      <item>
        <title>부동소수점 잘 알고 쓰자</title>
        <link>https://paranlee.github.io/data-pipeline/boxcox/02-floating-point/</link>
        <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/data-pipeline/boxcox/02-floating-point/</guid>
        <description>Overview 부동소수점으로 표현한 수가 실수를 정확히 표현하지 못하고
부동 소수점 연산 역시 실제 수학적 연산을 정확히 표현하지 못하는 것은 여러가지 문제를 낳는다.
Error of floating point example 0.1과 0.01을 표현하지 못하므로 0.1의 제곱이 0.01이 되지도 않고
0.01과 가장 가까운 수가 되지도 않는다.
24비트 단정밀도 표현에서,
십진수 0.1 은
지수 = -4, 가수 = 110011001100110011001101 이고 그 값은
정확히 0.1000000014901161193847656256이다.
이 수를 다시 제곱하면,
정확히 0.010000000298023226097399174250313080847263336181640625이다.
단정밀도 부동 소수점 (반올림 있는) 하드웨어에서 제곱을 한다면,</description>
      </item>
      
    
  </channel>
</rss>