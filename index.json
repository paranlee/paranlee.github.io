[{"content":"Markdown here\n","description":"test post","id":0,"section":"docs","tags":null,"title":"Basic Usage","uri":"https://paranlee.github.io/docs/gettingstarted/basicusage/"},{"content":"Markdown here\n","description":"test post","id":1,"section":"updates","tags":null,"title":"March 2021","uri":"https://paranlee.github.io/updates/2021_march/"},{"content":"Markdown here\n","description":"test post","id":2,"section":"docs","tags":null,"title":"Configuration","uri":"https://paranlee.github.io/docs/gettingstarted/configuration/"},{"content":"Markdown here\n","description":"test post","id":3,"section":"updates","tags":null,"title":"February 2021","uri":"https://paranlee.github.io/updates/2021_february/"},{"content":"Markdown here\n","description":"test post","id":4,"section":"docs","tags":null,"title":"Installation","uri":"https://paranlee.github.io/docs/gettingstarted/installation/"},{"content":"Markdown here\n","description":"test post","id":5,"section":"updates","tags":null,"title":"January 2021","uri":"https://paranlee.github.io/updates/2021_january/"},{"content":"Markdown here\n","description":"test post","id":6,"section":"docs","tags":null,"title":"Quick Start","uri":"https://paranlee.github.io/docs/gettingstarted/quickstart/"},{"content":"I love Opensource 오픈소스 HDL 을 활용하여 구현하려고 합니다.\n특정 회사의 EDA 에 종속적인 부분은 배제하고 보드없이 소프트웨어 수준에서 배울 수 있는 내용을 정리합니다.\nTodo verilog 코드를 통해서 netlist 를 합성하고 검증하는 하드웨어 디자인 위주로,\n하드웨어 설계와 소프트웨어 설계에는 본질적인 차이가 있기 때문에, 작성한 코드가 어떻게 합성될지,\n같이 고민해보면서 verilog 문법의 특성에 익숙해질 수 있습니다.\nC 문법에 기반한 프로그래밍 언어와 verilog 문법이 비슷하기 때문에, 익숙하면 도움이 됩니다.\n간단한 동작을 하는 CPU의 각 요소를 만들면서 필요한 디자인들을 익혀나가려고 합니다.\n연재의 목표는 최종적으로 CPU 설계 및 유닛 테스트를 통한 검증이며\n기회가 된다면 자동화 파이프라인까지 구현해보려고 합니다.\n","description":"상용 EDA 툴 없이 오픈소스 기반 EDA 툴을 사용하여 개발 환경을 구축하자","id":7,"section":"softcore","tags":["markdown","css","html","themes"],"title":"Verilog enviroment setup","uri":"https://paranlee.github.io/softcore/verilog-setup/00-overview/"},{"content":"Why use Boxcox transformation, perspective of workflow 값들의 차분 배열 (sort 후 뒤에 친구 값이랑 나랑 차이만 쏙)\n→ boxcox transformation (복잡한 지수함수의 승수의 해를 뉴턴 메서드로 구하고 이를 정규분포로 변환)\n→ 정규분포 6 σ (적당한 값 추리기 좋다)\n→ 평범한 놈들 그래 니들을 원했어 ㅇㅇ\nDefiniotion of the Boxcox transformation 선두 그룹에 값이 몰려 있는 경우처럼 통계적으로 접근하는 값들이 불균일한 산포를 이룰 경우,\n이 값들을 정규분포 관점으로 접근하고자 할 때 Boxcox transformation 을 사용합니다.\n양수 값을 갖는 수치 데이터와 함께 사용합니다.\nbox-cox-transformation 설명\nnewton-raphson 공식\n위키 - 수식\nImplementation of Boxcox Transformation scipy 깃허브 링크\nBloom filter Code block 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  # 1. scipy/stats/__init__.py stats 클래스에 메서드가 정의됨 Transformations =============== .. autosummary:: :toctree: generated/ boxcox boxcox_normmax boxcox_llf yeojohnson # 2. scipy/special/functions.json Cython 으로 래핑되어있는 boxcox 함수임 \u0026#34;boxcox\u0026#34;: { \u0026#34;_boxcox.pxd\u0026#34;: { \u0026#34;boxcox\u0026#34;: \u0026#34;dd-\u0026gt;d\u0026#34; } }, \u0026#34;boxcox1p\u0026#34;: { \u0026#34;_boxcox.pxd\u0026#34;: { # 3. scipy/scipy/special/_boxcox.pxd    Cython 으로 정의되어 있고, libc math api의 fabs, expm1 로 구현되어 있음.\n1차원 배열의 값은 아래의 변환을 거침.\nlibc.math - fab fab\nfabs, fabsf, fabsl - absolute value of floating-point number\n부동소수점 절대값임. 아래의 함수에서 보면 10^(-19) 보다 작을 경우 0으로 간주함.\nlibc.math - expm1 expm1\nexpm1, expm1f, expm1l - exponential minus 1\n링크에서 보여준 공식 그대로 사용하는 것을 알 수 있음.\nlibc.math Cython package 역시 c 는 number cruncher 들을 위한 프로그래밍 언어다.\n1 2 3 4 5 6 7 8 9 10 11 12 13  cdef inline double boxcox(double x, double lmbda) nogil: # if lmbda \u0026lt;\u0026lt; 1 and log(x) \u0026lt; 1.0, the lmbda*log(x) product can lose # precision, furthermore, expm1(x) == x for x \u0026lt; eps. # For doubles, the range of log is -744.44 to +709.78, with eps being # the smallest value produced. This range means that we will have # abs(lmbda)*log(x) \u0026lt; eps whenever abs(lmbda) \u0026lt;= eps/-log(min double) # which is ~2.98e-19. if fabs(lmbda) \u0026lt; 1e-19: return log(x) else: return expm1(lmbda * log(x)) / lmbda ....   ","description":"Using Boxcox transformation in data workflow","id":8,"section":"data-pipeline","tags":["markdown","css","html","themes"],"title":"Why project needed Boxcox transformation?","uri":"https://paranlee.github.io/data-pipeline/boxcox/00-boxcox/"},{"content":"Overview 패키지 업데이트가 비교적 느린편이므로, 성능 \u0026amp; 기능이 우수한 최신 릴리즈를 사용하려고 합니다.\nIcarus verilog install 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  $ sudo apt install autoconf gperf $ git clone https://github.com/steveicarus/iverilog.git ~/iverilog$ git tag ... v10_0 v10_1 v10_1_1 v10_2 v10_3 ... $ git checkout v10_3 $ sh autoconf.sh $ ./configure $ make $ sudo make install   설치 관련해서 참고하면 좋은 문서\n설치가 끝났으니 테스트 합니다~\nhelloverilog.v 1 2 3 4  module helloverilog; initial $display(\u0026#34;Hello, Verilog!\u0026#34;); endmodule    iverilog 컴파일러를 실행시킵니다.\niverilog compile 1  $ iverilog hello.v -o hello   시뮬레이션 합니다.\n자세한 과정은 차차 알아나가보죠~\nRun 1 2  $ vvp hello Hello, Verilog!   성공적으로 설치했습니다. 짝짝짝\n","description":"Icarus verilog 설치하기","id":9,"section":"softcore","tags":["markdown","css","html","themes"],"title":"Install - Icarus verilog","uri":"https://paranlee.github.io/softcore/verilog-setup/01-icarus-verilog/"},{"content":"Concept 몇가지 개념정리 및 코드를 보고 진행합니다.\nOutlier removal workflow 차분(Difference):\nsort 후 각 항목의 차이 값\r차분 값의 배열을 만들 수 있음.\r 사분위수(Quartile):\n데이터를 가장 작은 수부터 가장 큰 수까지 크기가 커지는 순서대로 정렬하였을 때,\r1/4, 2/4, 3/4 위치에 있는 수를 말한다. 각각 1사분위수, 2사분위수, 3사분위수라고 한다. 1/4의 위치란 전체 데이터의 수가 만약 100개이면 25번째 순서, 즉 하위 25%를 말한다. 따라서 2사분위수는 중앙값과 같다.\r때로는 위치를 1/100 단위로 나눈 백분위수(percentile)을 사용하기도 한다. 1사분위수는 25% 백분위수와 같다.\rnp.percentile(x, 0) # 최소값\rnp.percentile(x, 25) # 1사분위 수\rnp.percentile(x, 50) # 2사분위 수\rnp.percentile(x, 75) # 3사분위 수\rnp.percentile(x, 100) # 최댓값\r 아래는 위의 설명한 개념을 이용한 예제 프로그램입니다.\nOulier removal using diffrence series 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101  # Set lower and upper bound of a sequence # Percentile -\u0026gt; Difference -\u0026gt; x sigma import numpy as np import pandas ad pd \u0026#34;\u0026#34;\u0026#34; # numpy.argmin # min(), max() : 최소, 최대값을 구하기. # argmin(), argmax() : 최소, 최대값이 존재하는 위치(인덱스)를 구하기. # numpy.arange([start, ] stop, [step, ] dtype=None) numpy 모듈의 arange 함수는 반열린구간 [start, stop) 에서 step 의 크기만큼 일정하게 떨어져 있는 숫자들을 array 형태로 반환해 주는 함수다. # numpy.mean 평균 구하기 # numpy.diff(arr, [n]) n order 차분을 구함 \u0026#34;\u0026#34;\u0026#34; \u0026#34;\u0026#34;\u0026#34; @self : @series : 양의 실수 값으로 이루어진 1차원 배열 @scale : @cut_pt : @cut_ratio : 정규 분포로 변환된 데이터에서 선택할 표준 편차(시그마)값 \u0026#34;\u0026#34;\u0026#34; class Self: def __init__(self): self.series = np.array([]); def setSeries(arr) self.series = np.array(arr); def calc_bound_from_dist(self, series = self.series, scale = 1000, cut_pt = 10, cut_ratio = 2): unit = 100 / scale center = int(scale / 2) cut_point = int(cut_pt / unit) if cut_pt / unit \u0026gt; 1 else 1 # 100 # np.percentile(1000, np.arange(0, 100.1, 0.1)) # np.percentile(1000, [ 0. 0.1 0.2 ..., 99.8 99.9 100. ]) percentiles = np.percentile(series, np.arange(0, 100 + unit, unit)) # nonstationary process -\u0026gt; stationary process # TODO : Operator Overloading # percentiles[1:1001] - percentiles[0:1000] # -\u0026gt; e(n+1) - e(n) -\u0026gt; 1 dimensional array # 1st order differincing diff = percentiles[1:scale + 1] - percentiles[0:scale] # diff = np.diff(percentiles) # TODO : Operator Overloading  # 1e-6 delta less than (\u0026gt;) filter -\u0026gt; 1 dimensional array diff_nnz_idx = np.abs(diff) \u0026gt; 1e-6 # 1 * 10^(-6) # Fix code to cpu caching \u0026#34;\u0026#34;\u0026#34; Upper Bound Operation \u0026#34;\u0026#34;\u0026#34; ev_upper_range = np.arange(center, scale - cut_point + 1, 1) # [500, 501, ... 900] diff_ev_upper_part = diff[ev_upper_range][diff_nnz_idx[ev_upper_range]] upper_bound_diff = np.mean(diff_ev_upper_part) + np.std(diff_ev_upper_part) * cut_ratio # upper upper_bound_idx = np.argmax(diff[center:] \u0026gt; upper_bound_diff) if upper_bound_idx == 0 or upper_bound_idx == scale-center: upper_bound_idx = scale - 1 else: upper_bound_idx += center upper_bound = percentiles[upper_bound_idx] \u0026#34;\u0026#34;\u0026#34; Lower Bound Operation \u0026#34;\u0026#34;\u0026#34; ev_lower_range = np.arange(cut_point, center + 1, 1) # [100, 101, ... 500] diff_ev_lower_part = diff[ev_lower_range][diff_nnz_idx[ev_lower_range]] lower_bound_diff = np.mean(diff_ev_lower_part) + np.std(diff_ev_lower_part) * cut_ratio # lower lower_bound_idx = -np.argmax(diff[center::-1] \u0026gt; lower_bound_diff) if lower_bound_idx == 0 or lower_bound_idx == -center: lower_bound_idx = 1 else: lower_bound_idx += center lower_bound = percentiles[lower_bound_idx] return upper_bound, lower_bound   Boxcox Transformation boxcox transformation\n복잡한 지수함수의 승수의 해를 뉴턴 메서드로 구하고 이를 정규분포로 변환합니다.\r 무작위 값으로 boxcox 값이 얼마나 정규분포로 잘 바꿔주는지\nbox-cox-transformation-using-python에 한눈에 보기 쉬운 예제가 있습니다.\n아래 예제는 실제 측정값을 예제로 하는 예시입니다.\nC.Doom의 Cygnus 방향으로 47 개의 별을 포함하는 성단 CYG OB1의 Hertzsprung-Russell Diagram 실측 데이터입니다.\n첫 번째 변수는 별 표면에서 유효 온도의 로그 (log.Te)이고 두 번째 변수는 빛 강도의 로그(log.light)입니다.\n아래의 예제에서는 log.Te 만 데이터로 사용합니다.\n원본 데이터\n원본 데이터 csv\n예제를 돌리기 위해서 아나콘다 프레임워크를 설치하면 편리합니다.\n아래는 예제에서는 scipy.stats.boxcox 라이브러리를 사용합니다.\nscipy.stats.boxcox(x, lmbda=None, alpha=None)[source]\rReturn a dataset transformed by a Box-Cox power transformation.\rParameters\rxndarray\rInput array. Must be positive 1-dimensional. Must not be constant.\rlmbda{None, scalar}, optional\rIf lmbda is not None, do the transformation for that value.\rIf lmbda is None, find the lambda that maximizes the log-likelihood function and return it as the second output argument.\ralpha{None, float}, optional\rIf alpha is not None, return the 100 * (1-alpha)% confidence interval for lmbda as the third output argument. Must be between 0.0 and 1.0.\rReturns\rboxcoxndarray\rBox-Cox power transformed array.\rmaxlogfloat, optional\rIf the lmbda parameter is None, the second returned argument is the lambda that maximizes the log-likelihood function.\r(min_ci, max_ci)tuple of float, optional\rIf lmbda parameter is None and alpha is not None, this returned tuple of floats represents the minimum and maximum confidence limits given alpha.\r 비정상 확률 과정을 정상 확률 과정으로 변환하기\nBoxcox transformation example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91  import statsmodels.api as sm import matplotlib.pyplot as plt from scipy.stats import boxcox import seaborn as sns import dautil as dl import pandas_datareader as pd import numpy as np # import csv #from IPython.display import HTML # Load the data and transform it as follows : context = dl.nb.Context(\u0026#39;normalizing_boxcox\u0026#39;) lr = dl.nb.LatexRenderer(chapter=4, start=3, context=context) lr.render(r\u0026#39;y_i^{(\\lambda)} = \\begin{cases} \\dfrac{y_i^\\lambda - 1}{\\lambda} \u0026amp; \\text{if } \\lambda \\neq 0, \\\\[8pt] \\ln{(y_i)} \u0026amp; \\text{if } \\lambda = 0, \\end{cases} \u0026#39;) starsCYG = sm.datasets.get_rdataset(\u0026#34;starsCYG\u0026#34;, \u0026#34;robustbase\u0026#34;, cache=True).data whichData = \u0026#39;log.Te\u0026#39; # Data must be positive # Data must be 1-dimensional. transformed, lamda = boxcox(starsCYG[whichData]) # export CSV #with open(\u0026#39;test\u0026#39;, \u0026#39;w\u0026#39;, newline=\u0026#39;\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as csv_file: #writer = csv.writer(transformed, delimiter=\u0026#39;,\u0026#39;) #writer.writerow(\u0026#39;my_utf8_string\u0026#39;) print(\u0026#34;1. input data : \u0026#34;) print(starsCYG) print(type(starsCYG)) np.savetxt(\u0026#39;./input_data.txt\u0026#39; , (starsCYG) , header=\u0026#39;--input data start--\u0026#39; , footer=\u0026#39;--input data end--\u0026#39; , fmt=\u0026#39;%1.2f\u0026#39;) print(\u0026#34;\\n\\n\u0026#34;) print(\u0026#34;2. input data [%s] : \u0026#34; %whichData) print(starsCYG[whichData]) print(type(starsCYG[whichData])) np.savetxt(\u0026#39;./input_data_x.txt\u0026#39; , (starsCYG) , header=\u0026#39;--input data start--\u0026#39; , footer=\u0026#39;--input data end--\u0026#39; , fmt=\u0026#39;%1.2f\u0026#39;) print(\u0026#34;\\n\\n\u0026#34;) print(\u0026#34;3. transformed output : \u0026#34;) print(transformed) print(type(transformed)) print(\u0026#34;max lamda value : \u0026#34;) print(lamda) print(type(lamda)) print(\u0026#34;\\n\\n\u0026#34;) np.savetxt(\u0026#39;D:/PythonProject/output_data_x.txt\u0026#39; , (transformed) , header=\u0026#39;--output data start--\u0026#39; , footer=\u0026#39;--output data end--\u0026#39; , fmt=\u0026#39;%1.2f\u0026#39;) #region Plot # Display the Q - Q plots and the distribution as follows : #\u0026#34;\u0026#34;\u0026#34; sp = dl.plotting.Subplotter(2, 2, context) sp.label() sm.qqplot(starsCYG[whichData], fit=True, line=\u0026#39;s\u0026#39;, ax=sp.ax) sp.label(advance=True) sm.qqplot(transformed, fit=True, line=\u0026#39;s\u0026#39;, ax=sp.ax) sp.label(advance=True) sns.distplot(starsCYG[whichData], ax=sp.ax) sp.label(advance=True) sns.distplot(transformed, ax=sp.ax) plt.tight_layout() plt.show() #\u0026#34;\u0026#34;\u0026#34; #endregion Plot   다음은 postgres 에 적재하는 예시를 보겠습니다.\nPostgres 연동은 Citus membership-manager.py 를 참고했습니다.\nBoxcox transformation batch process example on postgres 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145  import datetime import csv import numpy as np from scipy.stats import boxcox from scipy.special import inv_boxcox import os import sys import psycopg2 from datetime import datetime as dt print(\u0026#34;WORKFLOW START [BOXCOX] :\u0026#34;, dt.isoformat(dt.utcnow())) idValue = (sys.argv[1]) print(\u0026#34;idValue : %(idValue)s\u0026#34;) timeValue = (sys.argv[2]) print(\u0026#34;timeValue : %(timeValue)s\u0026#34;) cdate = (sys.argv[3]) print(\u0026#34;cdate : %(cdate)s\u0026#34;) sigma = float(sys.argv[4]) print(\u0026#34;sigma : %(sigma)s\u0026#34;) connParam = \u0026#34;dbname = \u0026#39;db\u0026#39; user = \u0026#39;user\u0026#39; host = \u0026#39;192.168.10.1\u0026#39; password = \u0026#39;paranlee\u0026#39;\u0026#34; conn = psycopg2.connect(connParam) cur = conn.cursor() sql = \u0026#34;\u0026#34;\u0026#34;SELECT value FROM ts_bg_alarm_outlier_threshold_data WHERE cdate = %(cdate)sAND idValue = %(idValue)sAND timeValue = %(timeValue)s;\u0026#34;\u0026#34;\u0026#34; cur.execute(sql) result = [r[0] for r in cur.fetchall()] inputSeries = np.array(result, dtype=float) print(\u0026#34;inputSeries: \u0026#34;, inputSeries) # tryboxcox transformation try: #inputSeries = np.array(list_file,dtype=float) transformed, lamda = boxcox(inputSeries) print(\u0026#34;transformed output : \u0026#34;, transformed) print(\u0026#34;max lamda value : \u0026#34;, lamda) print(\u0026#34;transformed: \u0026#34;, transformed[0], transformed[1]) stddev = np.std(transformed) avg = np.mean(transformed) orgAvg = np.mean(inputSeries) orgStd = np.std(inputSeries) print(\u0026#34;avg value : %(avg)s\u0026#34;) print(\u0026#34;std value : %(stddev)s\u0026#34;) print(\u0026#34;orgAvg value : %(orgAvg)s\u0026#34;) print(\u0026#34;orgStd value : %(orgStd)s\u0026#34;) print(\u0026#34;sigma value : %(sigma)s\u0026#34;) # up, down boundary up = avg + (stddev * sigma) down = avg - (stddev * sigma) orgUp = orgAvg + (orgStd * sigma) orgDown = orgAvg - (orgStd * sigma) print(\u0026#34;up bodundary output : %(up)s\u0026#34;) print(\u0026#34;down boundary output : %(down)s\u0026#34;) print(\u0026#34;orgUp output : %(orgUp)s\u0026#34;) print(\u0026#34;orgDown output : %(orgDown)s\u0026#34;) #inverse up,down invup = inv_boxcox(up, lamda) invdown = inv_boxcox(down, lamda) print(\u0026#34;invup output : %(invup)s\u0026#34;) print(\u0026#34;invdown output : %(invdown)s\u0026#34;) invup2 = ((up * lamda) ** (1 / lamda)) invdown2 = ((down * lamda) ** (1 / lamda)) print(\u0026#34;invup2 output : %(invup2)s\u0026#34;) print(\u0026#34;invdown2 output : %(invdown2)s\u0026#34;) if str(invup) == \u0026#39;nan\u0026#39; or str(invup) == \u0026#39;inf\u0026#39;: invup = orgUp if str(invdown) == \u0026#39;nan\u0026#39; or str(invdown) == \u0026#39;inf\u0026#39;: invdown = orgDown invup = orgUp invdown = orgDown except: print(\u0026#39;except\u0026#39;) orgAvg = np.mean(inputSeries) orgStd = np.std(inputSeries) orgUp = orgAvg + (orgStd * sigma) orgDown = orgAvg - (orgStd * sigma) invup = orgUp invdown = orgDown print(orgAvg) print(orgStd) if str(invup) == \u0026#39;nan\u0026#39; or str(invup) == \u0026#39;inf\u0026#39;: invup = psycopg2.extensions.AsIs(\u0026#39;NULL\u0026#39;) if str(invdown) == \u0026#39;nan\u0026#39; or str(invdown) == \u0026#39;inf\u0026#39;: invdown = psycopg2.extensions.AsIs(\u0026#39;NULL\u0026#39;) # minus change 0 # if invup \u0026lt; 0: # invup = 0 # if invdown \u0026lt; 0: # invdown = 0 # threshold update sql = \u0026#34;\u0026#34;\u0026#34;UPDATE outlier_threshold_table SET threshold_min = %(invdown)s, threshold_max = %(invup)sWHERE 1=1 AND cdate = %(cdate)sAND idValue = %(idValue)sAND timeValue = %(timeValue)s;\u0026#34;\u0026#34;\u0026#34; cur.execute(sql) conn.commit() print(\u0026#34;WORKFLOW END [BOXCOX] :\u0026#34;, dt.isoformat(dt.utcnow()))   PG 에는 내장 함수에 Boxcox transformation 이 없고,\n부동소수점에 대한 예외처리가 좀 더 편리하게 할 수 있어,\nPL/SQL 프로시저로 구현하지 않고, Python3 로 구현한 배치 프로그램 예시를 구현해보았습니다.\nSummary 최종적으로 데이터 적재를 위해서는\n  이상점 추출 및 제외하기\n  정규분포 변환 후 표준편차로 적재할 데이터의 범위 설정, 역변환한 값을 적재하기\n  크게 2가지 워크 플로우로 이루어지는 것을 확인했습니다.\n","description":"Boxcox transformation, perspective of workflow","id":10,"section":"data-pipeline","tags":["markdown","css","html","themes"],"title":"Boxcox transformation on workflow","uri":"https://paranlee.github.io/data-pipeline/boxcox/01-workflow/"},{"content":"Overview 디지털회로 디버깅을 위해서 value change dump 파일로 클록, 입출력 등을 보여주는 GTK Wave 를 설치합니다.\n이 패키지는 최신 릴리즈가 성능에는 큰 영향이 없다고 생각이 들어서 그냥 패키지 매니저로 설치했습니다.\nInstall gtkwave on ubuntu 1  $ sudo apt -y install gtkwave    테스트 파일을 작성해봅니다.\ntrace.v 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  /* * 4bit_unssigned_adder \u0026amp; bit detector * * output : * @clk : internal clock * @a : * @b * */ module trace; reg clk = 0; reg[3:0] a = 4\u0026#39;d0; reg b = 0; always #1 clk = ~clk; always @(posedge clk) begin a = a + 1; b = a[2]; end initial begin $dumpfile(\u0026#34;trace.vcd\u0026#34;); $dumpvars(0, trace); // all vars dump #100 $finish; // 100 second end time end endmodule   $finish 부분은 종료되는 시점을 정합니다.\n해당 구문이 없으면 시뮬레이션이 계속 진행 되버립니다.\nsetup.sh 1 2 3 4  $ iverilog trace.v -o trace $ vvp trace VCD info: dumpfile trace.vcd opened for output.   만들어진 trace.vcd 파일 gtkwave 에서 실행합니다.\ntrace.v 를 시뮬레이션한 결과를 GTKWave 로 확인하기 \n\ndumpvars 에서 모든 변수를 덤프하므로,\nSST 에 모듈을 선택하고, 덤프한 signal 들의 파형을 조회할 수 있게 signal 메뉴로 드래그 드롭합니다.\n그리고 메뉴 항목에서 Time →Zoom → Zoom In 으로 확대할 수 있습니다.\n","description":"GTK wave 설치하기","id":11,"section":"softcore","tags":["markdown","css","html","themes"],"title":"Install - GTK wave","uri":"https://paranlee.github.io/softcore/verilog-setup/02-gtk-wave/"},{"content":"Overview 부동소수점으로 표현한 수가 실수를 정확히 표현하지 못하고\n부동 소수점 연산 역시 실제 수학적 연산을 정확히 표현하지 못하는 것은 여러가지 문제를 낳는다.\nError of floating point example 0.1과 0.01을 표현하지 못하므로 0.1의 제곱이 0.01이 되지도 않고\n0.01과 가장 가까운 수가 되지도 않는다.\n24비트 단정밀도 표현에서,\n십진수 0.1 은\n지수 = -4, 가수 = 110011001100110011001101 이고 그 값은\n정확히 0.1000000014901161193847656256이다.\n이 수를 다시 제곱하면,\n정확히 0.010000000298023226097399174250313080847263336181640625이다.\n단정밀도 부동 소수점 (반올림 있는) 하드웨어에서 제곱을 한다면,\n정확히 0.010000000707805156707763671875이다.\n하지만 0.01과 가장 가까운 표현 가능한 실수는\n정확히 0.009999999776482582092285156250이다.\nIrrational on floating point number π (및 π/2)를 표현하지 못하므로 tan(π/2)가 무한대의 값이 나오지 않으며 오버플로(overflow)가 생기지도 않는다.\n따라서 π/2를 정확히 표현하지 못하기 때문에 일반적인 부동소수점 하드웨어에서는 tan(π/2)를 계산하는 일이 불가능하다.\nC 언어에서 아래의 계산 결과는 16331239353195370.0 가 된다.\ndouble pi = 3.1415926535897932384626433832795;\rdouble z = tan(pi/2.0);\r 단정밀도에서는 (tanf 함수를 이용하여), −22877332.0 라는 결과를 얻는다.\n같은 이유로 sin(π)는 0이 되지 않고\nC 언어의 double type 배정밀도에서 약 0.1225×10-15\nC 언어의 float type 단정밀도에서 −0.8742×10-7가 된다.\nCommutative law \u0026amp; on floating point number 부동소수점 덧셈과 곱셈은 모두 교환법칙 (a + b = b + a 이고 a × b = b × a)이 성립한다.\nAssociative law on floating point number 결합법칙은 언제나 성립하는 것은 아니다.\n즉, (a + b) + c 이 항상 a + (b + c) 과 같지는 않게 된다.\n예를 들면 7자리 부동소수점(Float 7) 10진수 계산을 할 때\n1234.567 + 45.67846 = 1280.245\r1280.245 + 0.0004 = 1280.245\r 그러나\n45.67846 + 0.0004 = 45.67886\r45.67886 + 1234.567 = 1280.246\r Distribution law on floating point number 항상 분배법칙이 성립하는 것은 아니다.\n즉, (a + b) × c 은 a × c + b × c과 다를 수 있다.\n1234.567 × 3.333333 = 4115.223\r1.234567 × 3.333333 = 4.115223\r4115.223 + 4.115223 = 4119.338\r 그러나\n1234.567 + 1.234567 = 1235.802\r1235.802 × 3.333333 = 4119.340\r Error case on floating point numbers 유효 숫자를 잃어버리는 문제 뿐만 아니라,\nπ와 0.1를 정확하게 표현하지 못하는 문제와 다른 약간의 부정확성이 다음과 같은 현상을 일으킨다.\n 소거: 거의 같은 두 값을 빼는 것은 정확성을 매우 많이 잃게 된다.  이 문제가 아마도 가장 일반적이고 심각한 정확도 문제이다.\n정수로의 변환 문제:  (63.0/9.0)을 정수로 변환하면 7이 되지만 (0.63/0.09)는 6이 된다.\n이는 일반적으로 반올림 대신 버림을 하기 때문이다.\n제한된 지수부\n결과값이 오버플로되어 무한대값이 되거나 언더플로되어 비정규 값 또는 0이 될 수 있다.  만약 비정규 값이 되면 유효숫자를 완전히 잃어버린다.\n나눗셈이 안전한지 검사하는데 문제가 생김  즉, 제수(나눗수)가 0이 아님을 검사하는 것이 나눗셈이 오버플로되고 무한대값이 되지 않는 걸 보장하지 않는다.\n같음을 검사하는데 문제가 생김:  수학적으로 같은 계산결과가 나오는 두 계산 순서가 다른 부동소수점 값을 만들어낼 수 있다.\n프로그래머는 어느정도의 허용 오차를 가지고 비교를 수행하지만, 그렇다고 해서 문제가 완전히 없어지지 않는다.\nError message on C program 복잡한 지수함수에 승수에도 복잡한 계산 값을 가진 연산을 넣으면,\n연산 범위를 초과하여 double, float 값으로 나타날 때,\nC Program 에서 Exception 메시지를 출력하고 프로그램이 종료되는 경우가 있다.\n참고 위키 - 부동소수점\n영문 위키 - 부동소수점 정확도 문제 최소화 방안\n","description":"errors of the floating point","id":12,"section":"data-pipeline","tags":["markdown","css","html","themes"],"title":"부동소수점 잘 알고 쓰자","uri":"https://paranlee.github.io/data-pipeline/boxcox/02-floating-point/"},{"content":"Yosys 설치하기 yosys 는 베릴로그 RTL 합성 툴입니다.\n결과는 게이트를 합성하고 실제 칩의 하드웨어 도면을 볼 수 있습니다.\nyosys 도 기능과 성능이 우수한 최신 릴리즈로 설치합니다.\nyosys github setup 항목을 참고하시면 좋습니다.\nInstall dependency on ubuntu 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  $ sudo apt install build-essential clang bison flex \\ \tlibreadline-dev gawk tcl-dev libffi-dev git \\ \tgraphviz xdot pkg-config python3 libboost-system-dev \\ \tlibboost-python-dev libboost-filesystem-dev zlib1g-dev # 위의 패키지 말고도 추가적으로 설치했던 패키지 $ sudo apt install tcl8.6-dev gawk $ git clone https://github.com/YosysHQ/yosys # == git clone https://github.com/cliffordwolf/yosys.git ~/yosys$ git tag yosys-0.2.0 yosys-0.3.0 yosys-0.4 yosys-0.5 yosys-0.6 yosys-0.7 yosys-0.8 yosys-0.9 git checkout yosys-0.9 sudo make install   ","description":"Yosys 설치하기","id":13,"section":"softcore","tags":["markdown","css","html","themes"],"title":"Install - Yosys","uri":"https://paranlee.github.io/softcore/verilog-setup/03-yosys/"},{"content":"NetlistSVG 설치하기 베릴로그 코드를 바탕으로 손쉽게 이미지를 만들수 있는 NPM 패키지의 NetlistSVG를 설치합니다.\nnode.js \u0026amp; npm \u0026amp; npm 패키지에서 netlistsvg 설치가 필요합니다.\nNode.js 공식 홈페이지에서 바이너리 파일을 받아도 되고, 빌드해도 됩니다.\n깃허브 레포지토에 netlistsvg 를 실행해볼 수 있는 예제가 있습니다.\nnetlistsvg install 1 2  $ git clone https://github.com/nturley/netlistsvg $ cd examples   examples 디렉토리 아래에 있는 D flip-flop 예제로 svg 이미지 파일을 만들어보겠습니다.\n예제의 모듈 이름을 DFF에서 dff 소문자로 수정했습니다.\ndff.v 1 2 3 4 5 6 7 8 9 10 11 12 13 14  // module DFF (output reg Q, input C, D, R); module dff ( input C, D, R, output reg Q ); always @(posedge C) if (~R) begin Q \u0026lt;= 1\u0026#39;b0; end else begin Q \u0026lt;= D; end endmodule    클럭 C 가 rising edge 일때 동작하고,\n리셋 입력 R 이 negative 신호가 들어오면 출력 Q 를 0으로 리셋합니다.\n리셋 입력이 없을 경우, 출력 Q 는 입력 D 값을 저장하고, 변경이 없으면 클럭과 상관없이 해당 값을 출력합니다.\ndraw \n\n1 2  $ yosys -q -p \u0026#34;prep -top dff write_json dff.json\u0026#34; dff.v $ netlistsvg dff.json -o dff.svg   ","description":"NetlistSVG 설치하기","id":14,"section":"softcore","tags":["markdown","css","html","themes"],"title":"Install - NetlistSVG","uri":"https://paranlee.github.io/softcore/verilog-setup/04-netlist-svg/"},{"content":"Overview QEMU 전가상화로 x86_64 리눅스 머신에서 arm64 개발 \u0026amp; 테스트 환경을 구성해봅니다.\nqemu-arm-aarch64 와 라즈베리파이4 머신 세팅 기반,\naarch64 데비안 배포판 이미지 기반으로 네트워크 설정을 하고\n전가상화 개발 \u0026amp; 테스트 환경을 구축합니다.\n가상화 환경 구축 - full virtualized environment 데비안 라즈베리 파이 다운로드 페이지에서 원하는 이미지를 다운로드 받습니다.\nDebian 11 버전 라즈베리파이4 를 다운로드 받았습니다.\n라즈베리파이 4 이미지를 다운로드 받고 압축을 해제해줍니다.\nraspi_4_bullseye.img.xz 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  ~$ mkdir rpi4_qemu ~/rpi4_qemu$ wget https://raspi.debian.net/daily/raspi_4_bullseye.img.xz --2021-03-04 11:08:19-- https://raspi.debian.net/daily/raspi_4_bullseye.img.xz Resolving raspi.debian.net (raspi.debian.net)... 208.97.148.173, 194.58.198.32, 64.68.197.10, ... Connecting to raspi.debian.net (raspi.debian.net)|208.97.148.173|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 371554080 (354M) [application/x-xz] Saving to: ‘raspi_4_bullseye.img.xz’ raspi_4_bullseye.img.xz 100%[=================================================\u0026gt;] 354.34M 2.52MB/s in 2m 21s 2021-03-04 11:10:42 (2.51 MB/s) - ‘raspi_4_bullseye.img.xz’ saved [371554080/371554080] ~/rpi4_qemu$ ls raspi_4_bullseye.img.xz raspi_4_bullseye.img.xz ~/rpi4_qemu$ xz --decompress raspi_4_bullseye.img.xz   이미지를 부팅하기 위해서 파티션을 만들고, 마운트합니다.\nraspi_4_bullseye.img mount 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  # we need to determine the file byte  # offset for the first partition in order to mount it. ~/rpi4_qemu$ sudo fdisk -l raspi_4_bullseye.img Disk raspi_4_bullseye.img: 1.48 GiB, 1572864000 bytes, 3072000 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0xe0444a45 Device Boot Start End Sectors Size Id Type raspi_4_bullseye.img1 2048 614399 612352 299M c W95 FAT32 (LBA) raspi_4_bullseye.img2 614400 3071999 2457600 1.2G 83 Linux ~/rpi4_qemu$ mkdir -p mnt/rpi4 # Use the start sector (2048) of the first partition  # and multiply it with the sector size (512). 2048*512=1048576 # Use this number to mount with offset the first partition: ~/rpi4_qemu$ sudo mount -o offset=1048576 raspi_4_bullseye.img mnt/rpi4 ~/rpi4_qemu$ ls mnt/rpi4/ bcm2711-rpi-4-b.dtb bootcode.bin fixup4cd.dat fixup_x.dat start4db.elf sysconf.txt bcm2837-rpi-3-a-plus.dtb cmdline.txt fixup4db.dat initrd.img-5.10.0-3-arm64 start4x.elf vmlinuz-5.10.0-3-arm64 bcm2837-rpi-3-b-plus.dtb config.txt fixup4x.dat start.elf start_cd.elf bcm2837-rpi-3-b.dtb fixup.dat fixup_cd.dat start4.elf start_db.elf bcm2837-rpi-cm3-io3.dtb fixup4.dat fixup_db.dat start4cd.elf start_x.elf ~/rpi4_qemu$ cp mnt/rpi4/vmlinuz-5.10.0-3-arm64 . ~/rpi4_qemu$ cp mnt/rpi4/initrd.img-5.10.0-3-arm64 . ~/rpi4_qemu$ ls initrd.img-5.10.0-3-arm64 mnt raspi_4_bullseye.img vmlinuz-5.10.0-3-arm64 ~/rpi4_qemu$ qemu-system-aarch64 --help QEMU emulator version 4.2.1 (Debian 1:4.2-3ubuntu6.14)   마운트한 이미지를 qemu-system-aarch64 를 사용해서 실행합니다.\n메모리 옵션과 smp는 각자 환경에 맞춰 수정하면 됩니다.\nqemu-system-aarch64 1 2 3 4 5 6 7 8 9 10  qemu-system-aarch64 -M virt -m 8192 -smp 8 -cpu cortex-a72 \\ -kernel vmlinuz-5.10.0-3-arm64 \\ -initrd initrd.img-5.10.0-3-arm64 \\ -drive if=none,file=raspi_4_bullseye.img,format=raw,id=hd \\ -append \u0026#39;root=/dev/vda2 noresume\u0026#39; \\ -device virtio-blk-pci,drive=hd \\ -device virtio-net-pci,netdev=mynet \\ -netdev user,id=mynet,hostfwd=tcp::2222-:22 \\ -device virtio-rng-pci -no-reboot -nographic \\ -net nic -net tap,ifname=tap1,script=no -net socket,listen=localhost:8080   root 계정으로 로그인하면되고, 별도의 패스워드는 없습니다.\n전가상화 환경의 세팅은 아래의 링크를 참고하면 좋습니다.\n라즈베리파이3 가상화 환경에서 베어메탈 프로그래밍\n라즈베리파이3 가상화 환경으로 리눅스 데비안 배포판 올리기\n라즈베리파이 모델별 데비안 이미지 다운로드\n네트워크 설정하기 - full virtualized network setup 이제 전가상화 환경에서 네트워크를 이용하여 배포판 패키지를 이용할 수 있도록\nTUN/TAP 으로 이더넷 하드웨어 전가상화를 설정하겠습니다.\n일단 QEMU 호스트에서 설정을 진행합니다.\nInbound - Host 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65  ## HOST (WSL2) # openVPN의 TAP 가상 이더넷 디바이스를 추가함 $ sudo apt -y install openvpn $ sudo openvpn --mktun --dev tap1 Thu Mar 4 11:46:28 2021 TUN/TAP device tap1 opened Thu Mar 4 11:46:28 2021 Persist state set to: ON $ ip addr show 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: bond0: \u0026lt;BROADCAST,MULTICAST,MASTER\u0026gt; mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 4e:9d:59:d1:d3:cd brd ff:ff:ff:ff:ff:ff 3: dummy0: \u0026lt;BROADCAST,NOARP\u0026gt; mtu 1500 qdisc noop state DOWN group default qlen 1000 link/ether 42:70:8b:56:3e:06 brd ff:ff:ff:ff:ff:ff 4: sit0@NONE: \u0026lt;NOARP\u0026gt; mtu 1480 qdisc noop state DOWN group default qlen 1000 link/sit 0.0.0.0 brd 0.0.0.0 5: eth0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:15:5d:be:13:e7 brd ff:ff:ff:ff:ff:ff inet 172.25.229.250/20 brd 172.25.239.255 scope global eth0 valid_lft forever preferred_lft forever inet6 fe80::215:5dff:febe:13e7/64 scope link valid_lft forever preferred_lft forever 6: tap1: \u0026lt;BROADCAST,MULTICAST\u0026gt; mtu 1500 qdisc noop state DOWN group default qlen 100 link/ether 8e:1a:cb:7e:99:71 brd ff:ff:ff:ff:ff:ff $ sudo ifconfig tap1 192.168.105.1 up $ ifconfig eth0: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500 inet 172.21.36.142 netmask 255.255.240.0 broadcast 172.21.47.255 inet6 fe80::215:5dff:fe98:245a prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; ether 00:15:5d:98:24:5a txqueuelen 1000 (Ethernet) RX packets 342 bytes 35884 (35.8 KB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 19 bytes 1514 (1.5 KB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73\u0026lt;UP,LOOPBACK,RUNNING\u0026gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10\u0026lt;host\u0026gt; loop txqueuelen 1000 (Local Loopback) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 tap1: flags=4099\u0026lt;UP,BROADCAST,MULTICAST\u0026gt; mtu 1500 inet 192.168.105.1 netmask 255.255.255.0 broadcast 192.168.105.255 ether e6:9e:44:f3:25:57 txqueuelen 100 (Ethernet) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 # DNS 설정부분 (배포판 패키지를 설치하기 위해서는 DNS 설정이 꼭 필요함) $ cat /etc/resolv.conf # This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf: # [network] # generateResolvConf = false nameserver 8.8.8.8   게스트에서 고정 IP 및 포워드 게이트웨이를 설정하고\nDNS 설정을 추가해주어야 합니다.\nInbound - Guest 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  ## GUEST root@rpi4-20210303:~# cat /etc/network/interfaces auto enp0s1 iface enp0s1 inet static address 192.168.105.2 netmask 255.255.255.0 gateway 192.168.105.1 dns-nameserver 172.21.32.1 root@rpi4-20210303:~# /etc/init.d/networking restart root@rpi4-20210303:~# hostname -I 192.168.105.2 root@rpi4-20210303:~# cat /etc/resolvconf/resolv.conf.d/tail nameserver 8.8.8.8 $ /etc/init.d/networking restart root@rpi4-20210303:~# ping 172.21.36.142 PING 172.21.36.142 (172.21.36.142) 56(84) bytes of data. 64 bytes from 172.21.36.142: icmp_seq=1 ttl=64 time=0.571 ms 64 bytes from 172.21.36.142: icmp_seq=2 ttl=64 time=0.404 ms 64 bytes from 172.21.36.142: icmp_seq=3 ttl=64 time=0.373 ms ^C --- 172.21.36.142 ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2004ms rtt min/avg/max/mdev = 0.373/0.449/0.571/0.086 ms   여기까지 인바운드 설정은 완료했고, HOST 와 연결된 것을 확인할 수 있습니다.\n마지막으로 작업으로 게스트가 호스트를 통해서 외부망과 소통할 수 있도록\nNAT 아웃바운드 설정을 해야합니다.\n다시 호스트를 볼까요?\nOutbound - Host 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  ## GUEST ## HOST (WSL2) $ hostname -I 172.21.36.142 192.168.105.1 $ sudo sysctl -w net.ipv4.ip_forward=1 net.ipv4.ip_forward = 1 $ ping 192.168.105.2 PING 192.168.105.2 (192.168.105.2) 56(84) bytes of data. 64 bytes from 192.168.105.2: icmp_seq=1 ttl=64 time=0.807 ms 64 bytes from 192.168.105.2: icmp_seq=2 ttl=64 time=1.38 ms ^C --- 192.168.105.2 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1019ms rtt min/avg/max/mdev = 0.807/1.093/1.380/0.286 ms $ sudo iptables -t nat -A POSTROUTING -s 192.168.105.0/24 -o eth0 -j SNAT --to 172.21.36.142   자 이제 게스트 머신에서 패키지 업데이트를 진행해보겠습니다.\nOutbound - Guest 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  ## GUEST root@rpi4-20210303:~# ping 8.8.8.8 PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data. 64 bytes from 8.8.8.8: icmp_seq=1 ttl=113 time=36.4 ms 64 bytes from 8.8.8.8: icmp_seq=2 ttl=113 time=37.5 ms ^C --- 8.8.8.8 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1003ms rtt min/avg/max/mdev = 36.388/36.944/37.501/0.556 ms root@rpi4-20210303:~# apt -y update \u0026amp;\u0026amp; apt -y upgrade Hit:1 http://deb.debian.org/debian bullseye InRelease Reading package lists... Done Building dependency tree... Done Reading state information... Done All packages are up to date. Reading package lists... Done Building dependency tree... Done Reading state information... Done Calculating upgrade... Done 0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.   여기까지 설정하는데 수고많으셨습니다.\n그런데, 데비안 이미지의 기본 파티션의 사이즈가 작아서 패키지를 설치하는데 문제가 있습니다.\n그리고 막상 패키지를 설치할 수 있게되었는데,\n파티션 용량이 1.2 GB 정도로 굉장히 작아서 이를 늘려줄 필요가 있습니다.\n파티션 사이즈 조정 - Increase partition size fdisk 와 resize2fs 를 이용해서 파티션 사이즈를 늘려줍니다.\nfdisk \u0026amp; resize2fs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138  ## GUEST root@rpi4-20210303:~# fdisk -l Disk /dev/vda: 21.46 GiB, 23047700480 bytes, 45015040 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0xe0444a45 Device Boot Start End Sectors Size Id Type /dev/vda1 2048 614399 612352 299M c W95 FAT32 (LBA) /dev/vda2 614400 3071999 2457600 1.2G 83 Linux root@rpi4-20210303:~# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT vda 254:0 0 21.5G 0 disk ├─vda1 254:1 0 299M 0 part /boot/firmware └─vda2 254:2 0 1.2G 0 part / root@rpi4-20210303:~# df -h Filesystem Size Used Avail Use% Mounted on udev 3.9G 0 3.9G 0% /dev tmpfs 795M 348K 795M 1% /run /dev/vda2 1.2G 969M 101M 91% / tmpfs 3.9G 0 3.9G 0% /dev/shm tmpfs 5.0M 0 5.0M 0% /run/lock /dev/vda1 299M 73M 227M 25% /boot/firmware tmpfs 795M 0 795M 0% /run/user/0 root@rpi4-20210303:~# fdisk /dev/vda Welcome to fdisk (util-linux 2.36.1). Changes will remain in memory only, until you decide to write them. Be careful before using the write command. Command (m for help): u Changing display/entry units to cylinders (DEPRECATED!). Command (m for help): p Disk /dev/vda: 21.46 GiB, 23047700480 bytes, 45015040 sectors Geometry: 4 heads, 32 sectors/track, 44657 cylinders Units: cylinders of 128 * 512 = 65536 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0xe0444a45 Device Boot Start End Cylinders Size Id Type /dev/vda1 17 4800 4785 299M c W95 FAT32 (LBA) /dev/vda2 4801 24000 19201 1.2G 83 Linux Command (m for help): a Partition number (1,2, default 2): 1 The bootable flag on partition 1 is enabled now. Command (m for help): a Partition number (1,2, default 2): 2 The bootable flag on partition 2 is enabled now. Command (m for help): d Partition number (1,2, default 2): 2 Partition 2 has been deleted. Command (m for help): n Partition type p primary (1 primary, 0 extended, 3 free) e extended (container for logical partitions) Select (default p): p Partition number (2-4, default 2): 2 First cylinder (4801-44657, default 4801): Last cylinder, +/-cylinders or +/-size{K,M,G,T,P} (4801-44657, default 44657): Created a new partition 2 of type \u0026#39;Linux\u0026#39; and of size 2.4 GiB. Partition #2 contains a ext4 signature. Do you want to remove the signature? [Y]es/[N]o: n Command (m for help): p Disk /dev/vda: 21.46 GiB, 23047700480 bytes, 45015040 sectors Geometry: 4 heads, 32 sectors/track, 44657 cylinders Units: cylinders of 128 * 512 = 65536 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0xe0444a45 Device Boot Start End Cylinders Size Id Type /dev/vda1 * 17 4800 4785 299M c W95 FAT32 (LBA) /dev/vda2 4801 44657 39858 2.4G 83 Linux Command (m for help): a Partition number (1,2, default 2): 1 The bootable flag on partition 1 is disabled now. Command (m for help): w The partition table has been altered. Syncing disks. root@rpi4-20210303:~# reboot # 새로 잡힌 파티션에서 resize2fs 적용하기 df root@rpi4-20210303:~# df -h Filesystem Size Used Avail Use% Mounted on udev 3.9G 0 3.9G 0% /dev tmpfs 795M 352K 795M 1% /run /dev/vda2 1.2G 970M 101M 91% / tmpfs 3.9G 0 3.9G 0% /dev/shm tmpfs 5.0M 0 5.0M 0% /run/lock /dev/vda1 299M 73M 227M 25% /boot/firmware tmpfs 795M 0 795M 0% /run/user/0 root@rpi4-20210303:~# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT vda 254:0 0 21.5G 0 disk ├─vda1 254:1 0 299M 0 part /boot/firmware └─vda2 254:2 0 2.4G 0 part / root@rpi4-20210303:~# resize2fs /dev/vda2 resize2fs 1.46.1 (9-Feb-2021) Filesystem at /dev/vda2 is mounted on /; on-line resizing required old_desc_blocks = 1, new_desc_blocks = 1 [ 59.397302] EXT4-fs (vda2): resizing filesystem from 307200 to 637712 blocks [ 59.414158] EXT4-fs (vda2): resized filesystem to 637712 The filesystem on /dev/vda2 is now 637712 (4k) blocks long. root@rpi4-20210303:~# df -h Filesystem Size Used Avail Use% Mounted on udev 3.9G 0 3.9G 0% /dev tmpfs 795M 348K 795M 1% /run /dev/vda2 2.4G 981M 1.3G 43% / tmpfs 3.9G 0 3.9G 0% /dev/shm tmpfs 5.0M 0 5.0M 0% /run/lock /dev/vda1 299M 73M 227M 25% /boot/firmware tmpfs 795M 0 795M 0% /run/user/0   디스크 사이즈를 충분히 늘려놓은 것을 확인했습니다.\n이상, 전가상화 환경에서 즐거운 개발하세요~\n","description":"QEMU 전가상화로 x86_64 리눅스에서 arm64 개발 \u0026 테스트 환경 구성하기","id":15,"section":"linux-kernel","tags":["markdown","css","html","themes"],"title":"QEMU x86_64 machine full virtualized arm64 linux deveolpmet enviroment","uri":"https://paranlee.github.io/linux-kernel/arm64-cross-development/linux-kernel-cross-compile-arm64/"},{"content":"Overview x86_64 머신에서 arm64 리눅스 커널을 빌드합니다.\nUser mode Linux 리눅스 커널 소스 코드를 클론합니다.\n버전 선택은 마음대로 하시면 됩니다.\n저는 LTS 또는 SLTS 를 더 선호합니다.\nGithub 레포지토리가 아니라\nkernel.org Git 에서 클론하는 이유는 마이너 릴리즈에 대한 커밋도 들어가기 때문에,\n해당 릴리즈에 최신 변경 사항을 확인할 수 있습니다.\nLinux kernel source clone 1 2 3 4 5  git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git # 5.10.x latest (SLTS) git tag | grep \u0026#34;5.10.\u0026#34; git checkout 5.10.19   Ubuntu 1 2 3 4 5  # arch setup \u0026amp; debug symbol sudo apt -y install gcc-aarch64-linux-gnu cscope libssl-dev \\ autoconf automake autotools-dev curl libmpc-dev libmpfr-dev \\ libgmp-dev gawk build-essential bison flex texinfo \\ gperf libtool patchutils bc zlib1g-dev libexpat-dev   최신 버전의 arm64 크로스 컴파일러를 받고 싶으시면\naarch64-linux-gnu-gcc 링크에서 받을 수 있습니다.\narm64 에 맞춰서 빌드 플래그를 설정합니다.\nsetup.sh 1 2 3 4 5 6 7 8 9  cat \u0026gt; setup.sh export ARCH=arm64 # export CROSS_COMPILE=입맛대로.. export CROSS_COMPILE=aarch64-linux-gnu- # ctrl + d source setup.sh   그럼 이제 빌드를 합니다.\nmake 1 2 3 4 5 6 7  # defulat configuration file create make defconfig make -j8 # source tagging make -j8 cscope tags   이제 arm64 커널 소스 분석을 할 준비가 완료되었습니다.\n","description":"이 글 보고 크로스 컴파일 빨리 해보자~","id":16,"section":"linux-kernel","tags":["markdown","css","html","themes"],"title":"Linux kernel cross compile arm64 on x86_64 machine","uri":"https://paranlee.github.io/linux-kernel/linux-kernel-cross-compile/linux-kernel-cross-compile-arm64/"},{"content":"Overview 최근 Softcore 동향에서 주목받는 Chisel 을 소개합니다.\nConstructing Hardware in a Scala Embedded Language (Chisel)\nChisel 의 특성을 살펴보면\nRTL generator 들은 Chisel 로 만들어집니다.\n scala 를 기반으로 사용하는 HDL  Scala 언어의 좋은 특성을 많이 쓸 수 있습니다.\n object-oriented programming functional programming  또 흥미로운 프로젝트들이 많이 있는데, 하나를 예로 들면\nRISC-V \u0026ldquo;Rocket Chip\u0026rdquo; SoC Generator1\n특히 Rocket Chip2 을 기반으로 FPGA 보드에 올려서 만든\nlowrisc 데모영상을 보고 감동을 받았습니다.\nlowrisc demo   그 감동의 원인은,\n기존 FPGA \u0026amp; Arm (기타 등등..) core 가 SoC 에 들어있어 리눅스 부팅 가능한 보드가 아니라\nFPGA 에서 합성해서 CPU, FPU, 메모리 컨트롤러, 버스까지 개발자가 뚝딱!\n그것도 펌웨어 수준이 아니라, 리눅스 부팅까지 가능한 하드웨어 설계라는 점입니다!\n굉장히 범용적으로 하드웨어 가속화를 사용할 수 있을거라 생각이 드네요.\nlowrisc getting started 3에 보면 위의 데모를 위한 내용이 나와있습니다.\nChisel example source code adder 코드 예시는 아래와 같습니다.\nexample - adder 1 2 3 4 5 6 7 8 9 10  class Add extends Module { val io = IO(new Bundle { val a = Input(UInt(8.W)) val b = Input(UInt(8.W)) val y = Output(UInt(8.W)) }) io.y := io.a + io.b }   최근에 나온 언어들의 특징이기도 하고,\nScala 문법을 따라서\n모듈마다 명시해주던 변수 선언이 간편해졌네요.\nexample - stack 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  class Stack(val depth: Int) extends Module { val io = new Bundle { val push = Bool(INPUT) val pop = Bool(INPUT) val en = Bool(INPUT) val dataIn = UInt(INPUT, 32) val dataOut = UInt(OUTPUT, 32) } val stack_mem = Mem(UInt(width = 32), depth) val sp = Reg(init = UInt(0, width = log2Up(depth+1))) val dataOut = Reg(init = UInt(0, width = 32)) when (io.en) { when(io.push \u0026amp;\u0026amp; (sp \u0026lt; UInt(depth))) { stack_mem(sp) := io.dataIn sp := sp + UInt(1) } .elsewhen(io.pop \u0026amp;\u0026amp; (sp \u0026gt; UInt(0))) { sp := sp - UInt(1) } when (sp \u0026gt; UInt(0)) { dataOut := stack_mem(sp - UInt(1)) } } io.dataOut := dataOut }   호출해서 사용하는 각 모듈이 어떤식으로 Overload 되어 있는지 궁금해지는 코드네요.\nexample - stack unit test 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  class StackTests(c: Stack) extends Tester(c) { var nxtDataOut = 0 val stack = new ScalaStack[Int]() for (t \u0026lt;- 0 until 16) { val enable = rnd.nextInt(2) val push = rnd.nextInt(2) val pop = rnd.nextInt(2) val dataIn = rnd.nextInt(256) val dataOut = nxtDataOut if (enable == 1) { if (stack.length \u0026gt; 0) nxtDataOut = stack.top if (push == 1 \u0026amp;\u0026amp; stack.length \u0026lt; c.depth) { stack.push(dataIn) } else if (pop == 1 \u0026amp;\u0026amp; stack.length \u0026gt; 0) { stack.pop() } } poke(c.io.pop, pop) poke(c.io.push, push) poke(c.io.en, enable) poke(c.io.dataIn, dataIn) step(1) expect(c.io.dataOut, dataOut) } }   unit test 코드는 과연 이 코드가 하드웨어를 테스트 하는게 맞을까? 하는 생각이 드네요.\nSummary 오늘날 소프트웨어 개발이 블랙박스를 가지고 편하게 비지니스 로직을 개발하듯이,\n하드웨어 개발도 얼마 만큼 편하고 생산성 좋게 구현할 수 있을지 기대되고 궁금하네요.\n Chisel – Accelerating Hardware Design pdf link \u0026#x21a9;\u0026#xfe0e;\n Rocket Chip pdf link \u0026#x21a9;\u0026#xfe0e;\n lowrisc getting started link \u0026#x21a9;\u0026#xfe0e;\n   ","description":"새로운 HDL Chisel, and scala","id":17,"section":"softcore","tags":["markdown","css","html","themes"],"title":"Chisel Overview","uri":"https://paranlee.github.io/softcore/chisel/overview/"},{"content":"HA Proxy? L4 의 TCP (UDP 는 지원안함), L7의 HTTP 라우팅 기능을 하는 오픈소스 HA(High Availability) Proxy 서버임\n프록시하는 노드들을 Heartbeat 로 Health 체크함\n장애가 있는 서비스는 제외하고, 대응하는 여분의 Stanby 서비스가 있으면 이쪽으로 라우팅해줌\nL4 레이어 단계의 Log 기능이 있음\nShared frontend 로 HA Proxy 노드도 고가용성을 가지면서 확장 가능함\nIP로 세션 유지하기 Client IP에 대한 해쉬 테이블을 만들어서 찰싹 붙임\n/etc/haproxy/haproxy.cfg # ...\r# round robin balancing between the various backeands\rbackend app\rbalance roundrobin\r# 클라이언트 별 IP 값으로 sticky session\rhash-type consistent\rserver tcpserver01 192.168.10.1:30001 S01 check\rserver tcpserver01 192.168.10.2:30002 S02 check\r# server app1 192.168.10.1:30001 check\r# server app2 192.168.10.2:30002 check\r# ...\r","description":"HA Proxy sticky session 간단한 정리","id":18,"section":"data-pipeline","tags":["markdown","css","html","themes"],"title":"HA Proxy sticky session","uri":"https://paranlee.github.io/data-pipeline/haproxy/haproxy/"},{"content":"Overview 리눅스 4.4 \u0026amp; 4.19 는 현재도 현역 커널로 활동중입니다.1\n이 두 버전은 SLTS (Super Long Term Support) 로 2021년 현재까지도\nvanilla Linux kernel upstream 에서 유지보수하는 커널 버전이기 때문입니다.\n해당 커널 버전은 송전, 정유, 가스 시설 등등\u0026hellip;\n우리 도시를 이루는 핵심 인프라에서 사용하기 때문이죠.\n플랫폼의 20년 이상의 유지보수는 메인프레임 기반 시스템을 구축 시 고려하는 수준입니다.\nSLTS 에 해당하는 버전들은\n 커널 소스 태그 bootlin  둘 중 하나에 들어가셔서 릴리즈 번호를 보면 아마 깜짝 놀라실 겁니다.\n다음번 SLTS 는 언제 나오나요? Linux foundation 에서 SLTS 를 담당하는 CIP 에서 찾아보면 다음과 같이 나와있습니다.\nCIP  By starting the SLTS kernel development, CIP would be ready to align with a new Debian release which is expected in 2021.\n— CIVIL INFRASTRUCTURE PLATFORM2\n 데비안 릴리즈는 어떻게 진행되고 있는지 볼까요.\nDebian 11  Debian 11 for release, began on 13 January 2021.\n— The Debian release team3\n Debian release tables CIP 에서 언급했듯이 데비안 11 에서 리눅스 커널 버전이 들어가 있는 것을 확인할 수 있습니다. 4\n   Version (Code name) Linux kernel     11 (Bullseye) 5.10    참고  LWN: Super long-term kernel support   Linux kernel version history link \u0026#x21a9;\u0026#xfe0e;\n CIP would be ready to align with a new Debian release which is expected in 2021. link \u0026#x21a9;\u0026#xfe0e;\n Debian 11 for release, began on 13 January 2021. link \u0026#x21a9;\u0026#xfe0e;\n Debian 11 \u0026ndash; Release Notes link \u0026#x21a9;\u0026#xfe0e;\n   ","description":"Linux kernel version 그리고 (Super) Long Term Support","id":19,"section":"linux-kernel","tags":["markdown","css","html","themes"],"title":"linux kernel version","uri":"https://paranlee.github.io/linux-kernel/linux-kernel-version/slts/"},{"content":"Overview 리눅스 커널 소스를 클론하고, 응용프로그램 다루듯이 마음껏 뽀개도록,\nUser mode linux 라는 feature 를 사용하려고 합니다.\nUser mode Linux 리눅스 커널 소스 코드를 클론합니다.\n버전 선택은 마음대로 하시면 됩니다.\n저는 LTS 또는 SLTS 를 더 선호합니다.\nGithub 레포지토리가 아니라\nkernel.org Git 에서 클론하는 이유는 마이너 릴리즈에 대한 커밋도 들어가기 때문에,\n해당 릴리즈에 최신 변경 사항을 확인할 수 있습니다.\nLinux kernel source clone 1 2 3 4 5  git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git # 5.10.x latest (SLTS) git tag | grep \u0026#34;5.10.\u0026#34; git checkout 5.10.19   빌드할 때 특별히 설정 해주는 플래그입니다.\nSetup build flags 1 2 3 4 5 6 7 8  # arch setup \u0026amp; debug symbol $ cat \u0026gt; set.sh export CFLAGS=\u0026#34;-g -Wall -Wextra\u0026#34; export ARCH=um export SUBARCH=x86_64 # arch/arm64/Makefile.um X arm64 안됨 :( export SUBARCH=arm64 # ctrl + d $ source set.sh   이제 빌드를 해봅시다.\nconfig \u0026amp; compile 1 1 2  # make default config make defconfig   여기서 잠깐, 우리는 열심히 리눅스 커널을 해킹할것이므로\n고전적인 DDD나 Insight를 사용해서 디버깅하는 것도 가능합니다.\n최근에도 계속해서 릴리즈 하고 있는\n  KDE 기반의 KDbg\n  파이썬 기반의 웹 GUI 로 사용하는 gdbgui\n  VSCode GDB 연동 플러그인\n  선택지가 많네요.\n아무튼 아래의 추가 설정을 해줍시다!\n커널을 직접 빌드하는 경우에 디버깅이 가능하게 하려면 다음 옵션을 선택하면 됩니다.\nKernel Hacking\r-\u0026gt;Compile the kernel with frame pointers - Enable\r-\u0026gt;Show command line arguments on the host in TT mode - Disable\r 또 리눅스 커널의 lock 을 디버깅1 하기 위해서 설정할 수 있는 부분이 있습니다.\nconfig \u0026amp; compile +α 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71  # make default config sudo apt install -y libncurses-dev make menuconfig .config - Linux/x86 5.10.18 Kernel Configuration ───────────────────────────────────────────────────────────────────────────────── ┌────────────────── Linux/x86 5.10.18 Kernel Configuration ──────────────────┐ │ Arrow keys navigate the menu. \u0026lt;Enter\u0026gt; selects submenus ---\u0026gt; (or empty │ │ submenus ----). Highlighted letters are hotkeys. Pressing \u0026lt;Y\u0026gt; includes, │ │ \u0026lt;N\u0026gt; excludes, \u0026lt;M\u0026gt; modularizes features. Press \u0026lt;Esc\u0026gt;\u0026lt;Esc\u0026gt; to exit, \u0026lt;?\u0026gt; │ │ for Help, \u0026lt;/\u0026gt; for Search. Legend: [*] built-in [ ] excluded \u0026lt;M\u0026gt; module │ │ ┌────────────────────────────────────────────────────────────────────────┐ │ │ │ General setup ---\u0026gt; │ │ │ │ [*] 64-bit kernel │ │ │ │ Processor type and features ---\u0026gt; │ │ │ │ Power management and ACPI options ---\u0026gt; │ │ │ │ Bus options (PCI etc.) ---\u0026gt; │ │ │ │ Binary Emulations ---\u0026gt; │ │ │ │ Firmware Drivers ---\u0026gt; │ │ │ │ [*] Virtualization (NEW) ---\u0026gt; │ │ │ │ General architecture-dependent options ---\u0026gt; │ │ │ │ [*] Enable loadable module support ---\u0026gt; │ │ │ │ -*- Enable the block layer ---\u0026gt; │ │ │ │ IO Schedulers ---\u0026gt; │ │ │ │ Executable file formats ---\u0026gt; │ │ │ │ Memory Management options ---\u0026gt; │ │ │ │ [*] Networking support ---\u0026gt; │ │ │ │ Device Drivers ---\u0026gt; │ │ │ │ File systems ---\u0026gt; │ │ │ │ Security options ---\u0026gt; │ │ │ │ -*- Cryptographic API ---\u0026gt; │ │ │ │ Library routines ---\u0026gt; │ │ │ │ Kernel hacking ---\u0026gt; │ │ │ │ │ │ │ └────────────────────────────────────────────────────────────────────────┘ │ ├────────────────────────────────────────────────────────────────────────────┤ │ \u0026lt;Select\u0026gt; \u0026lt; Exit \u0026gt; \u0026lt; Help \u0026gt; \u0026lt; Save \u0026gt; \u0026lt; Load \u0026gt; │ └────────────────────────────────────────────────────────────────────────────┘ # 아래의 항목들 중 해킹을 위해서 필요한 항목을 선택하자  # TODO: 각 항목이 어떤 기능을 하는지 구체적으로 조사가 필요함 │ ┌────────────────────────────────────────────────────────────────────────┐ │ │ │ printk and dmesg options ---\u0026gt; │ │ │ │ Compile-time checks and compiler options ---\u0026gt; │ │ │ │ Generic Kernel Debugging Instruments ---\u0026gt; │ │ │ │ [*] Kernel debugging │ │ │ │ [*] Miscellaneous debug code │ │ │ │ Memory Debugging ---\u0026gt; │ │ │ │ [ ] Debug shared IRQ handlers │ │ │ │ Debug Oops, Lockups and Hangs ---\u0026gt; │ │ │ │ Scheduler Debugging ---\u0026gt; │ │ │ │ [ ] Enable extra timekeeping sanity checking │ │ │ │ Lock Debugging (spinlocks, mutexes, etc...) ---\u0026gt; │ │ │ │ -*- Stack backtrace support │ │ │ │ [ ] Warn for all uses of unseeded randomness │ │ │ │ [ ] kobject debugging │ │ │ │ Debug kernel data structures ---\u0026gt; │ │ │ │ [ ] Debug credential management │ │ │ │ RCU Debugging ---\u0026gt; │ │ │ │ [ ] Force round-robin CPU selection for unbound work items │ │ │ │ [ ] Force extended block device numbers and spread them │ │ │ │ [ ] Latency measuring infrastructure │ │ │ │ [*] Tracers ---\u0026gt; │ │ │ │ [ ] Sample kernel code ---- │ │ │ │ [*] Filter access to /dev/mem (NEW) │ │ │ │ [ ] Filter I/O access to /dev/mem (NEW) │ │ │ │ x86 Debugging ---\u0026gt; │ │ │ │ Kernel Testing and Coverage ---\u0026gt; │ │ │ └────────────────────────────────────────────────────────────────────────┘ │   config \u0026amp; compile 2 1 2  # make user mode linux make -j8 linux   루트 파일시스템을 마운트 합니다.\n저는 보통 소스 디렉토리에 해놓습니다.\nroot file system mount 1 2 3 4  sudo apt -y install supermin supermin -v --prepare bash coreutils -o $PWD/rootfs.template supermin -v --build --format chroot rootfs.template -o $PWD/rootfs   마지막으로 마운트한 경로에 스크립트를 작성하고,\nrootfs/boot/boot.sh 1 2 3 4  #!/bin/bash mount -t sysfs /sys /sys mount -t proc /proc /proc exec /bin/bash   실행권한을 변경하면 지루한 설정은 끝났습니다!\nchmod 1  chmod +x rootfs/boot/boot.sh   자 이제 user mode linux 를 실행하고 즐겨봅니다.\nHave a lot of fun 1  ./linux rootfstype=hostfs rootflags=$PWD/rootfs rw init=/boot/boot.sh   다음에는 커널 소스를 Hack 한 다음 GDB TUI 모드에서 디버깅하는 과정을 살펴봅니다.\n 문C 블로그 lockdep link \u0026#x21a9;\u0026#xfe0e;\n  ","description":"응용프로그램처럼 마음대로 커널 뽀개기","id":20,"section":"linux-kernel","tags":["markdown","css","html","themes"],"title":"Linux kernel x86_64 in the sandbox","uri":"https://paranlee.github.io/linux-kernel/user-mode-linux/linux-kernel-in-the-sandbox-arch/"},{"content":"why? 왜 Join 에서 nested loop (반복문 중첩) 대신 사용할까?\nBloom filter 확률적 자료구조?\nBloom filter Code block 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  /** *************************************************************************** * Structure to keep track of one bloom filter. Caller needs to * allocate this and pass it to the functions below. First call for * every struct must be to bloom_init(). * */ struct bloom { // These fields are part of the public interface of this structure.  // Client code may read these values if desired. Client code MUST NOT  // modify any of these.  int entries; double error; int bits; int bytes; int hashes; // Fields below are private to the implementation. These may go away or  // change incompatibly at any moment. Client code MUST NOT access or rely  // on these.  double bpe; unsigned char * bf; int ready; };  ","description":"hash 기반 Join 을 위해 빠르게 동작하는 확률적 자료구조","id":21,"section":"data-pipeline","tags":["markdown","css","html","themes"],"title":"overview","uri":"https://paranlee.github.io/data-pipeline/bloom-filter/bloom-filter/"},{"content":"Markdown here\n","description":"test post","id":22,"section":"docs","tags":null,"title":"Related content","uri":"https://paranlee.github.io/docs/relatedcontent/"},{"content":"Markdown here\n","description":"test post","id":23,"section":"docs","tags":null,"title":"Page Resources","uri":"https://paranlee.github.io/docs/pageresources/"},{"content":"Markdown here\n","description":"test post","id":24,"section":"docs","tags":null,"title":"Page Bundles","uri":"https://paranlee.github.io/docs/pagebundles/"},{"content":"Markdown here\n","description":"test post","id":25,"section":"docs","tags":null,"title":"Content Formats","uri":"https://paranlee.github.io/docs/contentfortmats/"},{"content":"Markdown here\n","description":"test post","id":26,"section":"docs","tags":null,"title":"Image Processing","uri":"https://paranlee.github.io/docs/imageprocessing/"},{"content":"Markdown here\n","description":"test post","id":27,"section":"docs","tags":null,"title":"Shortcodes","uri":"https://paranlee.github.io/docs/contentmanagement/shortcodes/"},{"content":"Markdown here\n","description":"test post","id":28,"section":"docs","tags":null,"title":"Frontmatter","uri":"https://paranlee.github.io/docs/contentmanagement/frontmatter/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\n\rHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","description":"","id":29,"section":"blog","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"https://paranlee.github.io/blog/markdown-syntax/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\n\rHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","description":"","id":30,"section":"markdown","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"https://paranlee.github.io/markdown/markdown-syntax/"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":31,"section":"docs","tags":["markdown","css","html","themes"],"title":"Section","uri":"https://paranlee.github.io/docs/contentmanagement/sections/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nHugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n\rYouTube Privacy Enhanced Shortcode   Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","description":"","id":32,"section":"blog","tags":["shortcodes","privacy"],"title":"Rich Content","uri":"https://paranlee.github.io/blog/rich-content/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nHugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n\rYouTube Privacy Enhanced Shortcode   Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","description":"","id":33,"section":"markdown","tags":["shortcodes","privacy"],"title":"Rich Content","uri":"https://paranlee.github.io/markdown/rich-content/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\ninhospita parcite confusaque translucet patri vestro qui optatis\nlumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus\nsilentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria\ntractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt \nThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra\ndicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere\nfurit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli\nLelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare\nEchionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert\nausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae\nvulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem\nPropoetides parte.\n","description":"","id":34,"section":"blog","tags":["markdown","text"],"title":"Placeholder Text","uri":"https://paranlee.github.io/blog/placeholder-text/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\ninhospita parcite confusaque translucet patri vestro qui optatis\nlumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus\nsilentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria\ntractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt \nThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra\ndicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere\nfurit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli\nLelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare\nEchionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert\nausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae\nvulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem\nPropoetides parte.\n","description":"","id":35,"section":"markdown","tags":["markdown","text"],"title":"Placeholder Text","uri":"https://paranlee.github.io/markdown/placeholder-text/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nEmoji can be enabled in a Hugo project in a number of ways.\n\rThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }  ","description":"","id":36,"section":"blog","tags":["emoji"],"title":"Emoji Support","uri":"https://paranlee.github.io/blog/emoji-support/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nEmoji can be enabled in a Hugo project in a number of ways.\n\rThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }  ","description":"","id":37,"section":"markdown","tags":["emoji"],"title":"Emoji Support","uri":"https://paranlee.github.io/markdown/emoji-support/"}]