<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux kernel on Paran Lee&#39;s docs</title>
    <link>https://paranlee.github.io/linux-kernel/</link>
    <description>Recent content in Linux kernel on Paran Lee&#39;s docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 01 Mar 2021 14:09:21 +0900</lastBuildDate>
    
        <atom:link href="https://paranlee.github.io/linux-kernel/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>QEMU x86_64 machine full virtualized arm64 linux deveolpmet enviroment</title>
        <link>https://paranlee.github.io/linux-kernel/arm64-cross-development/</link>
        <pubDate>Thu, 04 Mar 2021 00:36:39 +0900</pubDate>
        
        <guid>https://paranlee.github.io/linux-kernel/arm64-cross-development/</guid>
        <description></description>
      </item>
      
      <item>
        <title>Linux kernel cross compile arm64 on x86_64 machine</title>
        <link>https://paranlee.github.io/linux-kernel/linux-kernel-cross-compile/</link>
        <pubDate>Mon, 01 Mar 2021 00:36:39 +0900</pubDate>
        
        <guid>https://paranlee.github.io/linux-kernel/linux-kernel-cross-compile/</guid>
        <description></description>
      </item>
      
      <item>
        <title>User mode linux</title>
        <link>https://paranlee.github.io/linux-kernel/user-mode-linux/</link>
        <pubDate>Mon, 01 Mar 2021 00:34:39 +0900</pubDate>
        
        <guid>https://paranlee.github.io/linux-kernel/user-mode-linux/</guid>
        <description></description>
      </item>
      
      <item>
        <title>SLTS</title>
        <link>https://paranlee.github.io/linux-kernel/linux-kernel-version/</link>
        <pubDate>Mon, 01 Mar 2021 00:36:39 +0900</pubDate>
        
        <guid>https://paranlee.github.io/linux-kernel/linux-kernel-version/</guid>
        <description></description>
      </item>
      
      <item>
        <title></title>
        <link>https://paranlee.github.io/linux-kernel/page-replacement/page-replacement-asynchronously-synchronously/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/linux-kernel/page-replacement/page-replacement-asynchronously-synchronously/</guid>
        <description>Linux 커널에서 페이지 교체를 다음 두 가지 방법 중 하나로 처리합니다.
 kswapd 를 통한 Asynchronously, direct reclaim 를 통한 Synchronously  페이지 할당 시간에 할당 작업은 zone 구조체 인스턴스의 freelist 멤버에 등록했던 페이지를 즉시 받게되므로 수행 중이던 작업을 바로 다시 작업 할 수 있습니다. 직간접적으로 비즈니스 로직(메모리 할당한 프로그램)을 실행한다고 봅니다. (메모리 할당 오버헤드가 거의 없음)
 kswapd 를 통한 Asynchronously  페이지 할당을 작업을 확실히 끝 마치기 직전에, 사용 가능한 페이지가 zone low watermark 에 도달한지 확인하고 만약 그렇다면 kswapd 가 깨어납니다.</description>
      </item>
      
    
  </channel>
</rss>