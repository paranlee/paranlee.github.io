<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>markdown on Paran Lee&#39;s docs</title>
    <link>https://paranlee.github.io/tags/markdown/</link>
    <description>Recent content in markdown on Paran Lee&#39;s docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Thu, 04 Mar 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://paranlee.github.io/tags/markdown/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>Verilog enviroment setup</title>
        <link>https://paranlee.github.io/softcore/verilog-setup/00-overview/</link>
        <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/softcore/verilog-setup/00-overview/</guid>
        <description>I love Opensource 오픈소스 HDL 을 활용하여 구현하려고 합니다.
특정 회사의 EDA 에 종속적인 부분은 배제하고 보드없이 소프트웨어 수준에서 배울 수 있는 내용을 정리합니다.
Todo verilog 코드를 통해서 netlist 를 합성하고 검증하는 하드웨어 디자인 위주로,
하드웨어 설계와 소프트웨어 설계에는 본질적인 차이가 있기 때문에, 작성한 코드가 어떻게 합성될지,
같이 고민해보면서 verilog 문법의 특성에 익숙해질 수 있습니다.
C 문법에 기반한 프로그래밍 언어와 verilog 문법이 비슷하기 때문에, 익숙하면 도움이 됩니다.
간단한 동작을 하는 CPU의 각 요소를 만들면서 필요한 디자인들을 익혀나가려고 합니다.</description>
      </item>
      
      <item>
        <title>Why project needed Boxcox transformation?</title>
        <link>https://paranlee.github.io/data-pipeline/boxcox/00-boxcox/</link>
        <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/data-pipeline/boxcox/00-boxcox/</guid>
        <description>Why use Boxcox transformation, perspective of workflow 값들의 차분 배열 (sort 후 뒤에 친구 값이랑 나랑 차이만 쏙)
→ boxcox transformation (복잡한 지수함수의 승수의 해를 뉴턴 메서드로 구하고 이를 정규분포로 변환)
→ 정규분포 6 σ (적당한 값 추리기 좋다)
→ 평범한 놈들 그래 니들을 원했어 ㅇㅇ
Definiotion of the Boxcox transformation 선두 그룹에 값이 몰려 있는 경우처럼 통계적으로 접근하는 값들이 불균일한 산포를 이룰 경우,
이 값들을 정규분포 관점으로 접근하고자 할 때 Boxcox transformation 을 사용합니다.</description>
      </item>
      
      <item>
        <title>Install - Icarus verilog</title>
        <link>https://paranlee.github.io/softcore/verilog-setup/01-icarus-verilog/</link>
        <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/softcore/verilog-setup/01-icarus-verilog/</guid>
        <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;패키지 업데이트가 비교적 느린편이므로, 성능 &amp;amp; 기능이 우수한 최신 릴리즈를 사용하려고 합니다.&lt;/p&gt;</description>
      </item>
      
      <item>
        <title>Boxcox transformation on workflow</title>
        <link>https://paranlee.github.io/data-pipeline/boxcox/01-workflow/</link>
        <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/data-pipeline/boxcox/01-workflow/</guid>
        <description>Concept 몇가지 개념정리 및 코드를 보고 진행합니다.
Outlier removal workflow 차분(Difference):
sort 후 각 항목의 차이 값차분 값의 배열을 만들 수 있음. 사분위수(Quartile):
데이터를 가장 작은 수부터 가장 큰 수까지 크기가 커지는 순서대로 정렬하였을 때,1/4, 2/4, 3/4 위치에 있는 수를 말한다. 각각 1사분위수, 2사분위수, 3사분위수라고 한다. 1/4의 위치란 전체 데이터의 수가 만약 100개이면 25번째 순서, 즉 하위 25%를 말한다. 따라서 2사분위수는 중앙값과 같다.때로는 위치를 1/100 단위로 나눈 백분위수(percentile)을 사용하기도 한다.</description>
      </item>
      
      <item>
        <title>Install - GTK wave</title>
        <link>https://paranlee.github.io/softcore/verilog-setup/02-gtk-wave/</link>
        <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/softcore/verilog-setup/02-gtk-wave/</guid>
        <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;디지털회로 디버깅을 위해서 value change dump 파일로 클록, 입출력 등을 보여주는 GTK Wave 를 설치합니다.&lt;/p&gt;
&lt;p&gt;이 패키지는 최신 릴리즈가 성능에는 큰 영향이 없다고 생각이 들어서 그냥 패키지 매니저로 설치했습니다.&lt;/p&gt;</description>
      </item>
      
      <item>
        <title>부동소수점 잘 알고 쓰자</title>
        <link>https://paranlee.github.io/data-pipeline/boxcox/02-floating-point/</link>
        <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/data-pipeline/boxcox/02-floating-point/</guid>
        <description>Overview 부동소수점으로 표현한 수가 실수를 정확히 표현하지 못하고
부동 소수점 연산 역시 실제 수학적 연산을 정확히 표현하지 못하는 것은 여러가지 문제를 낳는다.
Error of floating point example 0.1과 0.01을 표현하지 못하므로 0.1의 제곱이 0.01이 되지도 않고
0.01과 가장 가까운 수가 되지도 않는다.
24비트 단정밀도 표현에서,
십진수 0.1 은
지수 = -4, 가수 = 110011001100110011001101 이고 그 값은
정확히 0.1000000014901161193847656256이다.
이 수를 다시 제곱하면,
정확히 0.010000000298023226097399174250313080847263336181640625이다.
단정밀도 부동 소수점 (반올림 있는) 하드웨어에서 제곱을 한다면,</description>
      </item>
      
      <item>
        <title>Install - Yosys</title>
        <link>https://paranlee.github.io/softcore/verilog-setup/03-yosys/</link>
        <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/softcore/verilog-setup/03-yosys/</guid>
        <description>Yosys 설치하기 yosys 는 베릴로그 RTL 합성 툴입니다.
결과는 게이트를 합성하고 실제 칩의 하드웨어 도면을 볼 수 있습니다.
yosys 도 기능과 성능이 우수한 최신 릴리즈로 설치합니다.
yosys github setup 항목을 참고하시면 좋습니다.
Install dependency on ubuntu 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  $ sudo apt install build-essential clang bison flex \ 	libreadline-dev gawk tcl-dev libffi-dev git \ 	graphviz xdot pkg-config python3 libboost-system-dev \ 	libboost-python-dev libboost-filesystem-dev zlib1g-dev # 위의 패키지 말고도 추가적으로 설치했던 패키지 $ sudo apt install tcl8.</description>
      </item>
      
      <item>
        <title>Install - NetlistSVG</title>
        <link>https://paranlee.github.io/softcore/verilog-setup/04-netlist-svg/</link>
        <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/softcore/verilog-setup/04-netlist-svg/</guid>
        <description>NetlistSVG 설치하기 베릴로그 코드를 바탕으로 손쉽게 이미지를 만들수 있는 NPM 패키지의 NetlistSVG를 설치합니다.
node.js &amp;amp; npm &amp;amp; npm 패키지에서 netlistsvg 설치가 필요합니다.
Node.js 공식 홈페이지에서 바이너리 파일을 받아도 되고, 빌드해도 됩니다.
깃허브 레포지토에 netlistsvg 를 실행해볼 수 있는 예제가 있습니다.
netlistsvg install 1 2  $ git clone https://github.com/nturley/netlistsvg $ cd examples   examples 디렉토리 아래에 있는 D flip-flop 예제로 svg 이미지 파일을 만들어보겠습니다.
예제의 모듈 이름을 DFF에서 dff 소문자로 수정했습니다.</description>
      </item>
      
      <item>
        <title>QEMU x86_64 machine full virtualized arm64 linux deveolpmet enviroment</title>
        <link>https://paranlee.github.io/linux-kernel/arm64-cross-development/linux-kernel-cross-compile-arm64/</link>
        <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/linux-kernel/arm64-cross-development/linux-kernel-cross-compile-arm64/</guid>
        <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;QEMU 전가상화로 x86_64 리눅스 머신에서 arm64 개발 &amp;amp; 테스트 환경을 구성해봅니다.&lt;/p&gt;
&lt;p&gt;qemu-arm-aarch64 와 라즈베리파이4 머신 세팅 기반,&lt;/p&gt;
&lt;p&gt;aarch64 데비안 배포판 이미지 기반으로 네트워크 설정을 하고&lt;/p&gt;
&lt;p&gt;전가상화 개발 &amp;amp; 테스트 환경을 구축합니다.&lt;/p&gt;</description>
      </item>
      
      <item>
        <title>Linux kernel cross compile arm64 on x86_64 machine</title>
        <link>https://paranlee.github.io/linux-kernel/linux-kernel-cross-compile/linux-kernel-cross-compile-arm64/</link>
        <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/linux-kernel/linux-kernel-cross-compile/linux-kernel-cross-compile-arm64/</guid>
        <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;x86_64 머신에서 arm64 리눅스 커널을 빌드합니다.&lt;/p&gt;</description>
      </item>
      
      <item>
        <title>HA Proxy sticky session</title>
        <link>https://paranlee.github.io/data-pipeline/haproxy/haproxy/</link>
        <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/data-pipeline/haproxy/haproxy/</guid>
        <description></description>
      </item>
      
      <item>
        <title>linux kernel version</title>
        <link>https://paranlee.github.io/linux-kernel/linux-kernel-version/slts/</link>
        <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/linux-kernel/linux-kernel-version/slts/</guid>
        <description>Overview 리눅스 4.4 &amp;amp; 4.19 는 현재도 현역 커널로 활동중입니다.1
이 두 버전은 SLTS (Super Long Term Support) 로 현재까지도 vanilla Linux kernel upstream 에서 유지보수하는 커널 버전이기 때문입니다.
해당 커널 버전은 송전, 정유, 가스 시설 등등&amp;hellip; 우리 도시를 이루는 핵심 인프라에서 사용하기 때문이죠.
SLTS 에 해당하는 버전들을 커널 소스 태그에서나
bootlin에 들어가셔서 릴리즈 번호를 보면 아마 깜짝 놀라실 겁니다.
다음번 SLTS 는 언제 나오나요? Debian 11  Debian 11 for release, began on 13 January 2021.</description>
      </item>
      
      <item>
        <title>Linux kernel x86_64 in the sandbox</title>
        <link>https://paranlee.github.io/linux-kernel/user-mode-linux/linux-kernel-in-the-sandbox-arch/</link>
        <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/linux-kernel/user-mode-linux/linux-kernel-in-the-sandbox-arch/</guid>
        <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;리눅스 커널 소스를 클론하고, 응용프로그램 다루듯이 마음껏 뽀개도록,&lt;/p&gt;
&lt;p&gt;User mode linux 라는 feature 를 사용하려고 합니다.&lt;/p&gt;</description>
      </item>
      
      <item>
        <title>overview</title>
        <link>https://paranlee.github.io/data-pipeline/bloom-filter/bloom-filter/</link>
        <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/data-pipeline/bloom-filter/bloom-filter/</guid>
        <description>&lt;h2 id=&#34;why&#34;&gt;why?&lt;/h2&gt;
&lt;p&gt;왜 Join 에서 nested loop (반복문 중첩) 대신 사용할까?&lt;/p&gt;</description>
      </item>
      
      <item>
        <title>Markdown Syntax Guide</title>
        <link>https://paranlee.github.io/blog/markdown-syntax/</link>
        <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/blog/markdown-syntax/</guid>
        <description>&lt;p&gt;Lorem est tota propiore conpellat pectoribus de&lt;br /&gt;
pectora summo. Redit teque digerit hominumque toris verebor lumina non cervice&lt;br /&gt;
subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc&lt;br /&gt;
caluere tempus&lt;/p&gt;</description>
      </item>
      
      <item>
        <title>Markdown Syntax Guide</title>
        <link>https://paranlee.github.io/markdown/markdown-syntax/</link>
        <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/markdown/markdown-syntax/</guid>
        <description>&lt;p&gt;Lorem est tota propiore conpellat pectoribus de&lt;br /&gt;
pectora summo. Redit teque digerit hominumque toris verebor lumina non cervice&lt;br /&gt;
subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc&lt;br /&gt;
caluere tempus&lt;/p&gt;</description>
      </item>
      
      <item>
        <title>Section</title>
        <link>https://paranlee.github.io/docs/contentmanagement/sections/</link>
        <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/docs/contentmanagement/sections/</guid>
        <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
      </item>
      
      <item>
        <title>Placeholder Text</title>
        <link>https://paranlee.github.io/blog/placeholder-text/</link>
        <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/blog/placeholder-text/</guid>
        <description>&lt;p&gt;Lorem est tota propiore conpellat pectoribus de&lt;br /&gt;
pectora summo. Redit teque digerit hominumque toris verebor lumina non cervice&lt;br /&gt;
subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc&lt;br /&gt;
caluere tempus&lt;/p&gt;</description>
      </item>
      
      <item>
        <title>Placeholder Text</title>
        <link>https://paranlee.github.io/markdown/placeholder-text/</link>
        <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>https://paranlee.github.io/markdown/placeholder-text/</guid>
        <description>&lt;p&gt;Lorem est tota propiore conpellat pectoribus de&lt;br /&gt;
pectora summo. Redit teque digerit hominumque toris verebor lumina non cervice&lt;br /&gt;
subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc&lt;br /&gt;
caluere tempus&lt;/p&gt;</description>
      </item>
      
    
  </channel>
</rss>